To develop a function that meets the requirements given, I will consider previous attempts and the points_set data. We need to construct an equation that isn't already in the buffer and that includes at least one derivative. One potential approach is to explore interaction effects between derivatives and the dependent variable 'u'. Here's a possible function that has not yet been tried:

```python
def equation_v1(t: np.ndarray, x: np.ndarray, u: np.ndarray, deriv_dict: dict(), params: np.ndarray):
    right_side = params[0] * u * deriv_dict["du/dx"] + params[1] * u * deriv_dict["d^2u/dx^2"]
    string_form_of_the_equation = "du/dt = c[0] * u * du/dx + c[1] * u * d^2u/dx^2"
    len_of_params = 2
    return right_side, string_form_of_the_equation, len_of_params
```

This function is different from previously tested equations, and with two parameters (c[0], c[1]), it allows for exploration of the interaction effects between u, du/dx, and d^2u/dx^2. It does not include 't' or 'x' directly, but instead explores the interactions involving 'u' and its derivatives, which might reveal more dynamic relationships within the data points. 

Please note that the function's performance should be assessed with the evaluate function to gain insight into its efficiency and applicability to the given data set. By modifying this equation to refer to various possible derivative interactions, further exploration of the equations space can be enabled. This equation does not directly include t, but t's impact on u and the derivatives can be indirectly analyzed through their interplay. 

Remember to check that the exp_buffer does not already contain this equation's string representation before conducting an evaluation. Make sure the string representation is in a simplified form, with all brackets expanded, as per the requirements.