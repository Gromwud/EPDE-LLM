```python
import numpy as np

def equation_v1(t: np.ndarray, x: np.ndarray, u: np.ndarray, derivs_dict: dict(), params: np.ndarray):
    right_side = params[0] * derivs_dict["du/dx"] + params[1] * derivs_dict["d^2u/dx^2"] * t
    string_form_of_the_equation = "du/dt = c[0] * du/dx + c[1] * d^2u/dx^2 * t"
    len_of_params = 2
    return right_side, string_form_of_the_equation, len_of_params

```
In the above function, the produced equation is "du/dt = c[0] * du/dx + c[1] * d^2u/dx^2 * t" which depends on "du/dx", "d^2u/dx^2" and "t". It didn't reference "du/dt", as per the requirements, and isn't a duplicate of any model in the "exp_buffer" dictionary.
The number of parameters is two whose values can be calculated by the loss function. Keep in mind that t*x and t*du/dx, etc. are legal since t is not explicitly included in the input variables for the equation, but its effect can be expressed through their multiplications with other existing variables.