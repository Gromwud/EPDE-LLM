Based on the given data and the instructions provided, one possible equation fitting the data that hasn't been tried yet could be:
\[
du/dt = c[0] * (d^2u/dx^2)^2 + c[1] * u * (du/dx)^2 + c[2] * d^2u/dt^2 * (du/dx)
\]
This equation considers all suggested conditions, including the use of higher order derivatives and the represented interaction between different variables. Here, we add a squared term for d^2u/dx^2, raising to the power of 2, also multiply it with a new parameter c[0]; a multiplication between u and (du/dx)^2 multiplied by c[1]; and at last multiply d^2u/dt^2 and du/dx by c[2]. All terms involved are used in such a way that we try to clarify the mentioned "[...] inexplicit interactions between the input variables".

Thus, the function could be:

```python
def equation_v1(t: np.ndarray, x: np.ndarray, u: np.ndarray, derivs_dict: dict(), params: np.ndarray):
    right_side = params[0] * (derivs_dict["d^2u/dx^2"]**2) + params[1] * u * (derivs_dict["du/dx"]**2) + params[2] * derivs_dict["d^2u/dt^2"] * derivs_dict["du/dx"]
    string_form_of_the_equation = "du/dt = c[0] * (d^2u/dx^2)**2 + c[1] * u * (du/dx)**2 + c[2] * d^2u/dt^2 * du/dx"
    len_of_params = 3
    return right_side, string_form_of_the_equation, len_of_params
```